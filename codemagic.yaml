definitions:
  rn_env: &rn_env
    BUILD_NUMBER: $BUILD_NUMBER
    REPO: $CM_REPO_SLUG
    COMMIT_SHA: $CM_COMMIT

  notify_email: &notify_email
    email:
      recipients:
        - apps@flywithavi.com
      notify:
        success: true
        failure: true
  production_triggering: &production_triggering
    cancel_previous_builds: true
    events:
      - push
    branch_patterns:
      - pattern: "main|beta"
  scripts:
    - &install_doppler
      name: Import Doppler secrets
      script: |
        brew install gnupg
        brew install dopplerhq/cli/doppler
        doppler secrets download --no-read-env \
          --no-file \
          --format env-no-quotes \
          --config $APP_ENV \
          --token $DOPPLER_TOKEN >> $CM_ENV
    - &make_env_file
      name: Make .env file
      script: |
        node ./scripts/make.env.js
    - &install_bundler
      name: Install bundler
      script: |
        gem install bundler
        bundle install
    - &install_imagemagick
      name: Install imagemagick
      script: |
        brew install imagemagick
    - &install_pod_dep
      name: Pod install
      script: |
        cd ios && pod install
    - &install_rn_dep
      name: Yarn install
      script: |
        rm patches/react-native-bootsplash+5.1.4.patch
        yarn --version
        yarn --production=false --frozen-lockfile
    - &mod_google_service_plist
      name: Mod GoogleService-Info.plist
      script: |
        cat ios/GoogleService-Info.${APP_ENV}.plist > ios/GoogleService-Info.plist
    - &mod_google_service_json
      name: Mod google-services.json
      script: |
        if [ -z "${AND_GOOGLE_SERVICES_JSON}" ]; then
          echo "Not modifying google-services.json"
        else
          GOOGLE_SERVICE_JSON_LOCATION=$CM_BUILD_DIR/android/app/google-services.json
          echo "Modifying $GOOGLE_SERVICE_JSON_LOCATION"
          echo "$AND_GOOGLE_SERVICES_JSON" | base64 -d > $GOOGLE_SERVICE_JSON_LOCATION
        fi
    - &install_android_ndk
      name: Install Android NDK
      script: |
        export ANDROID_NDK_HOME="$HOMEBREW_PREFIX/share/android-ndk"
        if [ ! -d "$ANDROID_NDK_HOME" ]; then
          brew install --cask android-ndk
        else
          echo "Android NDK already installed"
        fi

    - &create_firebase_credentials
      name: Create Firebase Credentials
      script: |
        echo "$FIREBASE_SERVICE_ACCOUNT" | base64 -d > $CM_BUILD_DIR/firebase_credentials.json

        if [ -n "$AND_PLAY_STORE_AUTH_JSON" ] && [ -n "$FASTLANE_ANDROID_JSON_KEY_FILE" ]; then
          echo "$AND_PLAY_STORE_AUTH_JSON" | base64 -d > $CM_BUILD_DIR/$FASTLANE_ANDROID_JSON_KEY_FILE
        fi
    - &build_app
      name: Build Application
      script: |
        bundle exec fastlane $PLATFORM $LANE

  build_android: &build_android
    max_build_duration: 30
    instance_type: mac_mini_m1
    artifacts:
      - build/android/app/build/outputs/apk/release/*.apk
      - $HOMEBREW_PREFIX/share/android-ndk
    cache:
      cache_paths:
      - $CM_BUILD_DIR/node_modules
      - $HOME/Library/Caches/Yarn
      - $CM_BUILD_DIR/.bundle/packages
      - $CM_BUILD_DIR/android/.gradle
    scripts:
      - *install_bundler
      - *install_imagemagick
      - *install_android_ndk
      - *install_doppler
      - *install_rn_dep
      - *make_env_file
      - *create_firebase_credentials
      - *mod_google_service_json
      - *build_app
  build_ios: &build_ios
    instance_type: mac_mini_m1
    artifacts:
      - build/ios/ipa/*.ipa
      - $CM_BUILD_DIR/ios/*.ipa
      - $CM_BUILD_DIR/ios/*.dSYM.zip
    max_build_duration: 30
    cache:
      cache_paths:
      - $CM_BUILD_DIR/node_modules
      - $HOME/Library/Caches/Yarn
      - $CM_BUILD_DIR/.bundle/packages
      - $CM_BUILD_DIR/ios/Pods
      - $CM_BUILD_DIR/ios/build/DerivedData
    scripts:
      - *install_bundler
      - *install_imagemagick
      - *install_doppler
      - *install_rn_dep
      - *install_pod_dep
      - *make_env_file
      - *mod_google_service_plist
      - *create_firebase_credentials
      - *build_app

workflows:
  android-staging:
    <<: *build_android
    name: Android Staging
    environment:
      java: 20
      groups:
        - Global
        - Staging
      vars:
        <<: *rn_env
        PLATFORM: android
        APP_ENV: staging
        LANE: staging

  android-beta:
    <<: [*build_android]
    name: Android Beta
    publishing:
      <<: *notify_email
    environment:
      java: 20
      groups:
        - Global
        - Production
      vars:
        <<: *rn_env
        PLATFORM: android
        APP_ENV: production
        LANE: beta

  ios-staging:
    <<: [*build_ios]
    name: iOS Staging
    environment:
      xcode: latest
      cocoapods: default
      groups:
        - Global
        - Staging
      vars:
        <<: *rn_env
        PLATFORM: ios
        APP_ENV: staging
        LANE: staging
        SENTRY_DSYM_PATH: $CM_BUILD_DIR/ios/build/Avi.app.dSYM.zip
  ios-beta:
    <<: [*build_ios]
    publishing:
      <<: *notify_email
    name: iOS Beta
    environment:
      xcode: latest
      cocoapods: default
      groups:
        - Global
        - Production
      vars:
        <<: *rn_env
        PLATFORM: ios
        APP_ENV: production
        LANE: beta
        SENTRY_DSYM_PATH: $CM_BUILD_DIR/ios/build/Avi.app.dSYM.zip
